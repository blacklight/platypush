{"version":3,"file":"static/js/7294.642ecc1a.js","mappings":"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","sources":["webpack://platypush/./src/components/panels/MusicMpd/Index.vue","webpack://platypush/./src/components/panels/MusicMpd/Index.vue?9486"],"sourcesContent":["<template>\n  <Loading v-if=\"loading\" />\n  <MusicPlugin plugin-name=\"music.mpd\" :loading=\"loading\" :config=\"config\" :tracks=\"tracks\" :status=\"status\"\n               :playlists=\"playlists\" :edited-playlist=\"editedPlaylist\" :edited-playlist-tracks=\"editedPlaylistTracks\"\n               :track-info=\"trackInfo\" :search-results=\"searchResults\" :library-results=\"libraryResults\" :path=\"path\"\n               @play=\"play\" @pause=\"pause\" @stop=\"stop\" @previous=\"previous\" @next=\"next\" @clear=\"clear\"\n               @set-volume=\"setVolume\" @seek=\"seek\" @consume=\"consume\" @random=\"random\" @repeat=\"repeat\"\n               @status-update=\"refreshStatus(true)\" @playlist-update=\"refresh(true)\"\n               @new-playing-track=\"refreshStatus(true)\" @remove-from-tracklist=\"removeFromTracklist\"\n               @add-to-tracklist=\"addToTracklist\" @swap-tracks=\"swapTracks\" @load-playlist=\"loadPlaylist\"\n               @play-playlist=\"playPlaylist\" @remove-playlist=\"removePlaylist\" @tracklist-move=\"moveTracklistTracks\"\n               @tracklist-save=\"saveToPlaylist\" @playlist-edit=\"playlistEditChanged\"\n               @add-to-tracklist-from-edited-playlist=\"addToTracklistFromEditedPlaylist\"\n               @remove-from-playlist=\"removeFromPlaylist\" @info=\"trackInfo = $event\" @playlist-add=\"playlistAdd\"\n               @add-to-playlist=\"addToPlaylist\" @playlist-track-move=\"playlistTrackMove\" @search=\"search\"\n               @search-clear=\"searchResults = []\" @cd=\"cd\"/>\n</template>\n\n<script>\nimport MusicPlugin from \"@/components/panels/Music/Index\";\nimport Utils from \"@/Utils\";\nimport Loading from \"@/components/Loading\";\n\nexport default {\n  name: \"MusicMpd\",\n  components: {Loading, MusicPlugin},\n  mixins: [Utils],\n  props: {\n    config: {\n      type: Object,\n      default: () => {},\n    },\n\n    pluginName: {\n      type: String,\n    },\n  },\n\n  data() {\n    return {\n      loading: false,\n      tracks: [],\n      playlists: [],\n      status: {},\n      editedPlaylist: null,\n      editedPlaylistTracks: [],\n      trackInfo: null,\n      searchResults: [],\n      libraryResults: [],\n      path: '/',\n    }\n  },\n\n  methods: {\n    async refreshTracks(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.tracks = await this.request('music.mpd.playlistinfo')\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refreshStatus(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.status = Object.entries(await this.request('music.mpd.status')).reduce((obj, [k, v]) => {\n          switch (k) {\n            case 'bitrate':\n            case 'volume':\n              obj[k] = parseInt(v)\n              break\n\n            case 'consume':\n            case 'random':\n            case 'repeat':\n            case 'single':\n              obj[k] = !!parseInt(v)\n              break\n\n            case 'song':\n              obj['playingPos'] = parseInt(v)\n              break\n\n            case 'time':\n              [obj['elapsed'], obj['duration']] = v.split(':').map(t => parseInt(t))\n              break\n\n            case 'elapsed':\n              break\n\n            default:\n              obj[k] = v\n              break\n          }\n\n          return obj\n        }, {})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refreshPlaylists(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.playlists = (await this.request('music.mpd.listplaylists')).map((playlist) => {\n          return {\n            name: playlist.playlist,\n            lastModified: playlist['last-modified'],\n          }\n        }).sort((a, b) => a.name.localeCompare(b.name))\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refresh(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        await Promise.all([\n          this.refreshTracks(background),\n          this.refreshStatus(background),\n          this.refreshPlaylists(background),\n        ])\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async play(event) {\n      if (event?.pos != null) {\n        await this.request('music.mpd.play_pos', {pos: event.pos})\n      } else if (event?.file) {\n        await this.request('music.mpd.play', {resource: event.file})\n      } else {\n        await this.request('music.mpd.play')\n      }\n\n      await this.refreshStatus(true)\n    },\n\n    async pause() {\n      await this.request('music.mpd.pause')\n      await this.refreshStatus(true)\n    },\n\n    async stop() {\n      await this.request('music.mpd.stop')\n      await this.refreshStatus(true)\n    },\n\n    async previous() {\n      await this.request('music.mpd.previous')\n      await this.refreshStatus(true)\n    },\n\n    async next() {\n      await this.request('music.mpd.next')\n      await this.refreshStatus(true)\n    },\n\n    async clear() {\n      await this.request('music.mpd.clear')\n      await Promise.all([this.refreshStatus(true), this.refreshTracks(true)])\n    },\n\n    async setVolume(volume) {\n      if (volume === this.status.volume)\n        return\n\n      await this.request('music.mpd.set_volume', {volume: volume})\n      await this.refreshStatus(true)\n    },\n\n    async seek(pos) {\n      await this.request('music.mpd.seek', {position: pos})\n      await this.refreshStatus(true)\n    },\n\n    async repeat(value) {\n      await this.request('music.mpd.repeat', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async random(value) {\n      await this.request('music.mpd.random', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async consume(value) {\n      await this.request('music.mpd.consume', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async addToTracklist(resource) {\n      if (resource.file)\n        resource = resource.file\n\n      await this.request('music.mpd.add', {resource: resource})\n      await this.refresh(true)\n    },\n\n    async addToTracklistFromEditedPlaylist(event) {\n      const tracks = event?.tracks?.map(\n        (pos) => this.editedPlaylistTracks[pos]\n      )?.filter((track) => track?.file)?.map((track) => track.file)\n\n      if (!tracks?.length)\n        return\n\n      await Promise.all(tracks.map((track) => this.request('music.mpd.add', {resource: track})))\n      await this.refresh(true)\n\n      if (event.play)\n        await this.request('music.mpd.play_pos', {pos: this.tracks.length - tracks.length})\n    },\n\n    async removeFromPlaylist(positions) {\n      await this.request('music.mpd.playlistdelete',\n          {pos: positions, name: this.playlists[this.editedPlaylist].name})\n      await this.playlistEditChanged(this.editedPlaylist)\n    },\n\n    async removeFromTracklist(positions) {\n      await this.request('music.mpd.delete', {positions: positions.sort()})\n      await this.refresh(true)\n    },\n\n    async swapTracks(positions) {\n      await this.request('music.mpd.move', {from_pos: positions[0], to_pos: positions[1]})\n      await this.refresh(true)\n    },\n\n    async playPlaylist(position) {\n      await this._loadPlaylist(position, true)\n    },\n\n    async loadPlaylist(position) {\n      await this._loadPlaylist(position, false)\n    },\n\n    async _loadPlaylist(position, play) {\n      const playlist = this.playlists[position]\n      await this.request('music.mpd.load', {playlist: playlist.name, play: play})\n      await this.refresh(true)\n    },\n\n    async removePlaylist(position) {\n      const playlist = this.playlists[position]\n      if (!confirm(`Are you REALLY sure that you want to remove the playlist ${playlist.name}?`))\n        return\n\n      await this.request('music.mpd.rm', {playlist: playlist.name})\n      await this.refreshPlaylists(true)\n    },\n\n    async saveToPlaylist(name) {\n      await this.request('music.mpd.save', {name: name})\n      await this.refreshPlaylists(true)\n    },\n\n    async moveTracklistTracks(event) {\n      await this.request('music.mpd.move', {from_pos: event.from, to_pos: event.to})\n      await this.refreshTracks(true)\n    },\n\n    async playlistAdd(track) {\n      await this.request('music.mpd.playlistadd', {uri: track, name: this.playlists[this.editedPlaylist].name})\n      await this.playlistEditChanged(this.editedPlaylist)\n    },\n\n    async playlistEditChanged(playlist) {\n      this.editedPlaylist = playlist\n      if (playlist == null)\n        return\n\n      this.loading = true\n      try {\n        this.editedPlaylistTracks = await this.request('music.mpd.listplaylistinfo',\n            {name: this.playlists[playlist].name})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async addToPlaylist(event) {\n      await Promise.all(event.playlists.map(async (playlistIdx) => {\n        await this.request('music.mpd.playlistadd', {\n          uri: event.track.file,\n          name: this.playlists[playlistIdx].name\n        })\n\n        await this.playlistEditChanged(playlistIdx)\n      }))\n    },\n\n    async playlistTrackMove(event) {\n      await this.request('music.mpd.playlistmove', {\n        name: this.playlists[event.playlist].name,\n        from_pos: event.from,\n        to_pos: event.to,\n      })\n\n      await this.playlistEditChanged(event.playlist)\n    },\n\n    async search(query) {\n      this.loading = true\n\n      try {\n        this.searchResults = await this.request('music.mpd.search', {filter: query})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async cd(path) {\n      this.loading = true\n\n      try {\n        this.libraryResults = (await this.request('music.mpd.lsinfo', {uri: path})).\n          filter((result) => !result.playlist)\n\n        this.path = path\n      } finally {\n        this.loading = false\n      }\n    },\n  },\n\n  mounted() {\n    this.refresh()\n    this.cd(this.path)\n  },\n}\n</script>\n","import { render } from \"./Index.vue?vue&type=template&id=556790e9\"\nimport script from \"./Index.vue?vue&type=script&lang=js\"\nexport * from \"./Index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["$data","loading","_createBlock","_component_Loading","key","_createVNode","_component_MusicPlugin","config","$props","tracks","status","playlists","editedPlaylist","editedPlaylistTracks","trackInfo","searchResults","libraryResults","path","onPlay","$options","play","onPause","pause","onStop","stop","onPrevious","previous","onNext","next","onClear","clear","onSetVolume","setVolume","onSeek","seek","onConsume","consume","onRandom","random","onRepeat","repeat","onStatusUpdate","_cache","$event","refreshStatus","onPlaylistUpdate","refresh","onNewPlayingTrack","onRemoveFromTracklist","removeFromTracklist","onAddToTracklist","addToTracklist","onSwapTracks","swapTracks","onLoadPlaylist","loadPlaylist","onPlayPlaylist","playPlaylist","onRemovePlaylist","removePlaylist","onTracklistMove","moveTracklistTracks","onTracklistSave","saveToPlaylist","onPlaylistEdit","playlistEditChanged","onAddToTracklistFromEditedPlaylist","addToTracklistFromEditedPlaylist","onRemoveFromPlaylist","removeFromPlaylist","onInfo","onPlaylistAdd","playlistAdd","onAddToPlaylist","addToPlaylist","onPlaylistTrackMove","playlistTrackMove","onSearch","search","onSearchClear","onCd","cd","name","components","Loading","MusicPlugin","mixins","Utils","props","type","Object","default","pluginName","String","data","methods","refreshTracks","background","this","request","entries","reduce","obj","k","v","parseInt","split","map","t","refreshPlaylists","playlist","lastModified","sort","a","b","localeCompare","Promise","all","event","pos","file","resource","volume","position","value","filter","track","length","positions","from_pos","to_pos","_loadPlaylist","confirm","from","to","uri","async","playlistIdx","query","result","mounted","__exports__","render"],"sourceRoot":""}